Fase 1: Struttura Base del DNA
Implementiamo prima la struttura fondamentale del DNA trading, creando le classi base che rappresenteranno i geni e i cromosomi. Questo ci permetterà di avere subito un sistema testabile.

Step 1.1: Classe Gene
Il Gene rappresenta la più piccola unità decisionale. Implementiamo:

Struttura base del gene con parametri principali (soglie, timeframe)
Metodi di mutazione semplice
Metodo di valutazione base su dati storici
Test unitari per verificare il comportamento
inoltre nel codice non devono esserci parametri hardcodadi, tutti i parametri vannno nel file gene.yaml in config e gestiti con il config manager
I livelli di tracciamento devono essere gestiti per ogni file prodottto tramite il sistema centrale di logging
file non superiore a 350 righe altrimenti dividerli

Step 1.2: Sistema di Database

### Struttura del Database

#### Tabella: populations
- population_id (PK): Identificativo unico della popolazione
- name: Nome descrittivo della popolazione
- max_size: Dimensione massima consentita
- current_generation: Numero della generazione corrente
- created_at: Data di creazione
- updated_at: Data ultimo aggiornamento
- status: Stato della popolazione (active/archived)
- diversity_score: Metrica della diversità genetica
- performance_score: Score complessivo della popolazione
- mutation_rate: Tasso di mutazione (0.1-5%)
- selection_pressure: Pressione selettiva (1-10)
- generation_interval: Intervallo generazionale
- diversity_threshold: Soglia diversità minima
- symbol_id: Riferimento al symbol di trading
- timeframe: Timeframe di analisi

#### Tabella: chromosomes
- chromosome_id (PK): Identificativo unico del cromosoma
- population_id (FK): Riferimento alla popolazione
- fingerprint: Hash unico del DNA della strategia
- generation: Generazione di appartenenza
- age: Età in generazioni
- created_at: Data di creazione
- parent1_id: ID del primo genitore
- parent2_id: ID del secondo genitore
- status: Stato del cromosoma
- performance_metrics: JSON con metriche di performance
- weight_distribution: JSON con pesi dei geni
- last_test_date: Data ultimo test
- test_results: JSON con risultati test

#### Tabella: chromosome_genes
- chromosome_gene_id (PK): Identificativo unico
- chromosome_id (FK): Riferimento al cromosoma
- gene_type: Tipo di gene
- parameters: JSON con parametri
- weight: Peso nelle decisioni
- is_active: Stato attivazione
- performance_contribution: Contributo alle performance
- last_mutation_date: Data ultima mutazione
- mutation_history: Storia delle mutazioni
- validation_rules: Regole validazione parametri

#### Tabella: evolution_history
- history_id (PK): Identificativo unico
- population_id (FK): Riferimento alla popolazione
- generation: Numero generazione
- best_fitness: Miglior fitness
- avg_fitness: Fitness media
- diversity_metric: Metrica diversità
- mutation_rate: Tasso mutazione
- timestamp: Data evoluzione
- generation_stats: Statistiche dettagliate generazione
- mutation_stats: Statistiche mutazioni
- selection_stats: Statistiche selezione
- performance_breakdown: Breakdown performance per tipo gene

Step 1.3: Sistema CLI

### Menu Principale
```
=== TradingDNA 3.0 ===
1. Configurazione
   - Parametri Sistema
   - Reset Sistema
2. Dati
   - Scarica Dati
   - Visualizza Dati
3. Geni
   - Test Gene
   - Visualizza Parametri
   - Modifica Parametri
   - Reset Parametri
4. Popolazioni
   - Crea Popolazione
   - Lista Popolazioni
   - Status Popolazione
   - Dettagli Cromosoma
   - Avvia Evoluzione
   - Ferma Evoluzione
   - Status Evoluzione
5. Test
   - Test Sistema Completo
   - Inizializza Database Test
   - Crea Popolazione Test
   - Test Evoluzione
```

### Prossimi Step

1. Sistema di Trading
   - Implementare calcolo segnali per ogni gene
   - Gestire combinazione segnali
   - Validare segnali generati
   - Implementare position sizing
   - Gestire risk management
   - Tracciare performance

2. Connessione Exchange
   - Configurare connessione
   - Gestire autenticazione
   - Implementare rate limiting
   - Gestire ordini
   - Monitorare posizioni

3. Monitoraggio
   - Dashboard realtime
   - Alert sistema
   - Report performance
   - Analisi trading

Note Implementative:
- Mantenere file sotto 350 righe
- Usare logging centralizzato
- Evitare valori hardcoded
- Validare input utente
- Gestire errori gracefully
- Documentare funzionalità
- Testare componenti
- Usare configurazioni YAML
- Mantenere stato database
- Gestire recovery sistema

Stato Attuale:
- Sistema base funzionante con dieci geni
- Implementazioni complete con configurazione e logging
- Database base implementato
- Struttura menu CLI completata
- Sistema popolazioni operativo
- Sistema evoluzione implementato
- Sistema test automatizzato
- Pronto per implementazione trading
